# 
msgid ""
msgstr ""
"Project-Id-Version: BikaLIMS 3.1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-12 10:24\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../bika.sphinx/source/developing_bika_lims.rst:3
msgid "Developing Bika LIMS"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:5
msgid "**How-Tos, Tips and Examples**"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:7
msgid "`Configuring a Bika LIMS development environment`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:9
msgid ""
"Before beginning, you will need to install a some tools and create a "
"development copy of the source."
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:11
msgid "**Import/Export tools**"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:13
msgid "`Creating an instrument import interface`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:15
msgid ""
"The introduction of analyses results into Bika LIMS can be performed "
"manually, but also automatically by using the results files generated "
"directly by equipment or middleware software."
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:17
msgid "`Using JSON to connect with Bika-LIMS`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:19
msgid ""
"Bika includes plone.jsonapi for reading, updating, and creating and deleting"
" objects. The JSON API is used internally for many AJAX requests, and also "
"for implementing alternative interface."
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:21
msgid "**Customization of report templates**"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:23
msgid "`Creating new report templates`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:25
msgid ""
"The results report appearance can be modified easily modifying its template "
"and by using TAL expressions."
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:27
msgid "**Other resources**"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:29
msgid "`Translations and localisation`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:31
msgid ""
"Bika uses zope.i18n and gettext to translate strings. This is the Plone "
"standard, and the process is adapted from several Plone add-ons."
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:33
msgid "`External ID Server`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:35
msgid ""
"If you are installing a clustering setup with multiple ZEO servers, the "
"content IDs generated by Bika will need to be unique among all servers. This"
" article describes how to set-up an ID Server."
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:37
msgid "`Adding a view-specific JavaScript`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:39
msgid ""
"If you want to create a new JavaScript feature for a specific view, is "
"better to use an specific JS file for each one avoiding to modify other "
"views."
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:41
msgid "`Top level Entity Relationship Diagram (ERD)`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:43
msgid "**How-Tos**"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:45
msgid "`Choice of Browser for testing`_"
msgstr ""

#: ../../bika.sphinx/source/developing_bika_lims.rst:47
msgid "How to test with your preferred browser."
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:3
msgid "Configuring a Bika LIMS development environment"
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:5
msgid "Steps to configuring a Bika LIMS development environment"
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:7
msgid "Install Plone and Bika LIMS"
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:9
msgid "Follow the `Bika-LIMS installation instructions.`_"
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:11
msgid "Install and configure git"
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:13
msgid ""
"Follow these steps: `Github: Set Up Git <https://help.github.com/articles"
"/set-up-git/>`_."
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:15
msgid "Fork and Clone the Bika-LIMS sources"
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:17
msgid ""
"Follow the instructions at `Github: Fork A Repo "
"<https://help.github.com/articles/fork-a-repo/>`_."
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:21
msgid ""
"When you clone the new fork that you have created, you should place it in "
"the src/ directory inside your Plone installation. By default, the directory"
" name of the new clone will be that of the repository, but this is not "
"required."
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:24
msgid "Configure Buildout"
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:26
msgid ""
"You must edit buildout.cfg. You will need to add or edit the \"develop = \" "
"statement in the [buildout] section, to include the folder that contains the"
" forked source."
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:34
msgid "Remember to run bin/buildout again."
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:36
msgid "Next steps"
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:38
msgid ""
"Join the bika-developers list at http://lists.sourceforge.net/lists/listinfo"
"/bika-developers, and the IRC channel at irc.freenode.net/#bika immediately."
" We will be happy to help you acheive the highest code quality with your "
"customisation project."
msgstr ""

#: ../../bika.sphinx/source/development_environment.rst:40
msgid ""
"Read the excellent `Plone developer documentation "
"<http://docs.plone.org/develop/index.html>`_."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:3
msgid "Creating an Instrument Import Interface"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:6
msgid "Introduction"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:8
msgid ""
"The introduction of analyses results into Bika LIMS can be performed "
"manually, but also automatically by using the results files generated "
"directly by equipment or middleware software. An **instrument results file "
"import interface** is a small part of code that parses and imports the "
"results from those instrument-specific files into Bika LIMS. That prevents "
"from results being entered manually by the user."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:10
msgid ""
"Check the list of `instruments currently supported "
"<https://github.com/bikalabs/Bika-LIMS/wiki/Supported-instrument-"
"interfaces/>`_"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:13
msgid "File formats and structure"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:15
msgid ""
"The results file format and structure depends on each instrument, therefore "
"each import interface must be developed specifically for each result file. "
"Comma Separated Values (CSV) file format is one of the most common formats "
"currently used, as well as Tab Separated Values (TSV) file format."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:17
msgid "Excerpt of a CSV file from WineScan Auto::"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:25
msgid "Excerpt of a TSV file from Dionex instrument::"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:40
msgid ""
"Bika LIMS makes easy to develop parsers for those file types thanks to "
"built-in generic parsers. The development of specific-instrument interfaces "
"is only a matter of taking advantage of Object Oriented polymorphism."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:44
msgid "Architecture concepts"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:47
msgid ""
"All the instrument import logic and related classes are under the "
"`bika.lims.exportimport.instruments <https://github.com/bikalabs/Bika-"
"LIMS/tree/develop/bika/lims/exportimport/instruments/>`_ package. Inside "
"this package, `__init__.py <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/__init__.py>`_ and "
"`resultsimport.py <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/resultsimport.py>`_ are"
" the most important classes involved in parsing and importing the results. "
"Besides, a hierarchy of packages following the "
"`<manufacturer>.<instrument_model>` rule are placed here and contains both "
"the controller classes for the instrument-specific results import forms and "
"the form template. As an example, the import interface for Agilent's "
"Masshunter quantitative results file comprises the following classes:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:49
msgid ""
"`The template <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/agilent/masshunter/quantitative_import.pt>`_"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:50
msgid ""
"`The parser <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/agilent/masshunter/quantitative.py#L101>`_"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:51
msgid ""
"`The controller <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/agilent/masshunter/quantitative.py>`_"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:53
msgid ""
"In fact, most of the import interfaces can be done easily by adding these "
"three classes."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:56
msgid "Creating the template"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:58
msgid ""
"TAL is the template language used Plone. TAL is an XML-based language, which"
" adds programming logic to XML attributes. The `TAL Reference Guide "
"<http://www.owlfish.com/software/simpleTAL/tal-guide.html>`_ is a good "
"starting point to know how it works. Also, you might check `Plone's "
"Templates Basics "
"<docs.simplesconsultoria.com.br/developermanual/templates_css_and_javascripts/template_basics.html>`_"
" for further information."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:60
msgid ""
"Even though it may seem complex, the templates used for instrument import "
"forms are quite easy and basic HTML knowledge would be enough to develop "
"your own interface. The following image shows what the template for the FOSS"
" Winescan Auto results import form looks like:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:62
msgid "FOSS Winescan Auto results import form"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:64
msgid ""
"The following are the basic fields an instrument import template might have:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:66
msgid "**File**: the input type element for the results file upload."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:68
msgid ""
"**Format**: the file formats and file versions that Bika LIMS accepts for "
"this instrument and model. If the results file specs change in future, the "
"new version might be added here, so for a given instrument, more than one "
"format will be available (i.e. CSV v0.93, CSV v1.0, CSV v1.2, etc.)"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:70
msgid ""
"**Analyisis Requests state**: allows the user to set if the results must "
"only be saved if their Analysis Request has the state Received or Received "
"and to be verified"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:72
msgid ""
"**Results override**: allows the user to set the rules the importer will "
"follow if a result has already been set in the system."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:74
msgid ""
"**Instrument**: allows the user to set the instrument to which the results "
"will be linked if the file contains calibration tests (the identifiers are "
"Reference Sample IDs)."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:77
msgid "Creating the parser"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:79
msgid ""
"The parser is the class responsible for parsing the results file. Any parser"
" must inherit from `InstrumentResultsFileParser <https://github.com/bikalabs"
"/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/resultsimport.py#L14>`_"
" or from any of its child classes and override its methods. "
"`InstrumentCSVResultsFileParser <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/resultsimport.py#L187>`_"
" is the most commonly used class to be inherited from, which is a child from"
" InstrumentFileParser. As the name indicates, this class provides methods to"
" read and parse CSV-type files."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:81
msgid ""
"In most cases, overriding the method `_parseline(self, line) "
"<https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/resultsimport.py#L187>`_"
"  would be enough for a fully functional importer interface:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:93
msgid ""
"The method will be called by the parent class every time a new line is "
"reached. The logic to be implemented in this method must achieve the "
"following:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:95
msgid "**Split the line, retrieve the data and fill a key,value dictionary**."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:97
msgid "As an example, for a line::"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:101
msgid "with header::"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:105
msgid "a dictionary might be created as follows:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:117
msgid ""
"Where D2 is an Analysis Service Keyword and the keys from the inner "
"dictionary are the result and values to be saved for that Analysis. By the "
"default, the importer will use the field specified by the 'DefaultResult' "
"key as the default value for the analyses. Nevertheless, the importer will "
"look for the rest of values to find matches with interim fields (if exist "
"for that Analysis Service)."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:119
msgid ""
"**Add the previous dictionary to 'rawresults'** by using the method "
"`_addRawResult(self, resid, values={}, override=False): "
"<https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/resultsimport.py#L57>`_"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:124
#: ../../bika.sphinx/source/instrument_import_interface.rst:217
msgid "where:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:126
msgid ""
"*resid*: is the Identifier of the Analysis Request, Sample, Reference "
"Sample, etc."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:127
msgid "*rawdict*: is the dictionary of values created in the first step"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:128
msgid ""
"*override*: action to take if another rawresult has been already added for "
"the same resid and analysis."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:130
msgid "**Return an integer value**:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:132
msgid "0: If the parser should follow the next line."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:133
msgid ""
"1..n: If the parser should jump n lines before calling _parseline again."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:134
msgid ""
"-1: If the parser failed due to a critical error. The import will be "
"aborted."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:136
msgid ""
"Excerpt of `WinescanCSVParser <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/foss/winescan/__init__.py>`_"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:210
msgid ""
"You may notice that in this case, some additional data checks are performed:"
" detection of duplicate records, empty results, orphan values, etc. The "
"`Logger <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/logger.py>`_ top-level "
"class in the hierarchy also provides some useful methods:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:219
msgid "*msg*: the message to be displayed"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:220
msgid "*numline*: the affected number of line from the file being parsed"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:221
msgid "*line*: the line string itself"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:223
msgid ""
"All this information is displayed in the web page after the submission is "
"done."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:227
msgid "Where should the parser be placed?"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:229
msgid ""
"As mentioned above a package following the rule "
"`bika.lims.exportimport.instruments.<manufacturer>.<model>` should be "
"created. The parser classes are usually defined inside the `__init__.py` "
"file from that package. See `WinescanCSVParser <https://github.com/bikalabs"
"/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/foss/winescan/__init__.py>`_"
" to see what it looks like. Creating the controller"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:232
msgid ""
"The controller manages the submission of the template, acquires the request "
"values, initializes the parser to be used for the specified file and "
"executes the importer."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:234
msgid ""
"The controller consists of an `Import(context, request)` method. This is the"
" method that will be fired when the user submits the form. Besides, a global"
" variable called title must be declared. Its value will be used on the "
"'Instruments' selection list for the specific form being rendered on the "
"fly."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:236
msgid "Below, the main logic to be implemented in the controller:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:272
msgid "And thats all!"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:274
msgid ""
"The `importer.process()` does all the work: it runs the parser and saves the"
" data retrieved into Bika LIMS."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:276
msgid ""
"Notice that you can also use an specific Importer instead of the generic "
"`AnalysisResultsImporter <https://github.com/bikalabs/Bika-"
"LIMS/blob/develop/bika/lims/exportimport/instruments/resultsimport.py#L230>`_,"
" but it's not recommended unless you need very special features not already "
"provided by this."
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:280
msgid "Registering the new interface into the system"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:282
msgid ""
"The last step is to register the interface in the system, for which you only"
" need to add the path to your new package in "
"`bika.lims.exportimport.instruments.__init__.py <https://github.com/bikalabs"
"/Bika-LIMS/blob/develop/bika/lims/exportimport/instruments/__init__.py>`_:"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:296
msgid "Share your interface"
msgstr ""

#: ../../bika.sphinx/source/instrument_import_interface.rst:298
msgid ""
"Bika LIMS is an Open Source project and your contributions are welcome. Do a"
" `pull request <https://github.com/bikalabs/Bika-LIMS/pulls>`_ of your code "
"and benefit all the community of users. If you don't know how to do this, "
"you can either send your code to the `developers list`_."
msgstr ""
